# -*- coding: utf-8 -*-
"""Crop yield prediction as per soil quality

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fetGervWaQM6D2V0hP0Qc3YCVJHIJ7aA
"""



# for manipulation
import numpy as npy
import pandas as pd

# for data manipulation
import matplotlib.pyplot as plt
import seaborn as sea

# for interactivity
from ipywidgets import interact
import warnings
warnings.filterwarnings("ignore")

from google.colab import drive
drive.mount('/content/drive')

# Lets read the dataset
data = pd.read_csv('/content/drive/MyDrive/data.csv')
data.head()

# Lets check the shape of the dataset
print("Dataset shape is: ",data.shape)

# lets check if there is any missing value n the column or not
data.isnull().sum()

# lets check the Crops present in this Dataset
data['label'].value_counts()

# lets check the summary for all the crops 

print("Avg ratio of Nitrogen in the soil: {0:.2f}".format(data['N'].mean()))
print("Avg ratio of Phosphoras in the soil: {0:.2f}".format(data['P'].mean()))
print("Avg ratio of Potassium in the soil: {0:.2f}".format(data['K'].mean()))
print("Avg Temprature in Celsius: {0:.2f}".format(data['temperature'].mean()))
print("Avg relative Humidity in % : {0:.2f}".format(data['humidity'].mean()))
print("Avg PH value of the soil: {0:.2f}".format(data['ph'].mean()))
print("Avg Rainfall in mm: {0:.2f}".format(data['rainfall'].mean()))

@interact
def summary(crops = list(data['label'].value_counts().index)):
  x = data[data['label'] == crops]

  print("-"*50)
  print("Statistics for Nitrogen")
  print("Minimum Nitrogen required: ",x['N'].min())
  print("Avaerage Nitrogen required: ",x['N'].mean())
  print("Maximum Nitrogen required: ",x['N'].max())
  print("-"*50)

  print("Statistics for Phosphorus")
  print("Minimum Phosphorus required: ",x['P'].min())
  print("Avaerage Phosphorus required: ",x['P'].mean())
  print("Maximum Phosphorus required: ",x['P'].max())
  print("-"*50)

  print("Statistics for Potassium")
  print("Minimum Potassium required: ",x['K'].min())
  print("Avaerage Potassium required: ",x['K'].mean())
  print("Maximum Potassium required: ",x['K'].max())
  print("-"*50)

  print("Statistics for Temperature")
  print("Minimum Temperature required: {0:.2f}".format(x['temperature'].min()))
  print("Avaerage Temperature required: {0:.2f}".format(x['temperature'].mean()))
  print("Maximum Temperature required: {0:.2f}".format(x['temperature'].max()))
  print("-"*50)

  print("Statistics for Humidity")
  print("Minimum Humidity required: {0:.2f}".format(x['humidity'].min()))
  print("Avaerage Humidity required: {0:.2f}".format(x['humidity'].mean()))
  print("Maximum Humidity required: {0:.2f}".format(x['humidity'].max()))
  print("-"*50)

  print("Statistics for PH")
  print("Minimum PH required: {0:.2f}".format(x['ph'].min()))
  print("Avaerage PH required: {0:.2f}".format(x['ph'].mean()))
  print("Maximum PH required: {0:.2f}".format(x['ph'].max()))
  print("-"*50)

  print("Statistics for Rainfall")
  print("Minimum Rainfall required: {0:.2f}".format(x['rainfall'].min()))
  print("Avaerage Rainfall required: {0:.2f}".format(x['rainfall'].mean()))
  print("Maximum Rainfall required: {0:.2f}".format(x['rainfall'].max()))
  print("-"*50)

@interact
def compare(conditions=['N','P','K','temperature','ph','humidity','rainfall']):
    print("average value for ",conditions,"is{0:.2f}".format (data[conditions].mean()))
    print("****************")
    print("Rice : {0:.2f}".format(data[(data['label']=='rice')][conditions].mean()))
    print("Black Grams : {0:.2f}".format(data[(data['label']=='blackgram')][conditions].mean()))
    print("Banana : {0:.2f}".format(data[(data['label']=='banana')][conditions].mean()))
    print("Jute : {0:.2f}".format(data[(data['label']=='jute')][conditions].mean()))
    print("Coconut : {0:.2f}".format(data[(data['label']=='coconut')][conditions].mean()))
    print("Apple: {0:.2f}".format(data[(data['label']=='apple')][conditions].mean()))
    print("Papaya : {0:.2f}".format(data[(data['label']=='papaya')][conditions].mean()))
    print("Muskmelon : {0:.2f}".format(data[(data['label']=='muskmelon')][conditions].mean()))
    print("Grapes: {0:.2f}".format(data[(data['label']=='grapes')][conditions].mean()))
    print("Watermelon: {0:.2f}".format(data[(data['label']=='watermelon')][conditions].mean()))
    print("Kidney Beans : {0:.2f}".format(data[(data['label']=='kidneybeans')][conditions].mean()))
    print("Mung Beans : {0:.2f}".format(data[(data['label']=='mungbeans')][conditions].mean()))
    print("oranges : {0:.2f}".format(data[(data['label']=='oranges')][conditions].mean()))
    print("Chick Peas: {0:.2f}".format(data[(data['label']=='chickpeas')][conditions].mean()))
    print("Lentils : {0:.2f}".format(data[(data['label']=='lentils')][conditions].mean()))
    print("Cotton: {0:.2f}".format(data[(data['label']=='cotton')][conditions].mean()))
    print("Maize : {0:.2f}".format(data[(data['label']=='maize')][conditions].mean()))
    print("Moth Beans : {0:.2f}".format(data[(data['label']=='mothbeans')][conditions].mean()))
    print("Pigeon Peas: {0:.2f}".format(data[(data['label']=='pigeonpeas')][conditions].mean()))
    print("Mango : {0:.2f}".format(data[(data['label']=='mango')][conditions].mean()))
    print("Pomegranate : {0:.2f}".format(data[(data['label']=='pomegranate')][conditions].mean()))
    print("Coffee : {0:.2f}".format(data[(data['label']=='coffee')][conditions].mean()))

# lets make this function more intuitive

@interact
def compare(conditions =['N','P','K','temperature','ph','humidity','rainfall']):
    print("crops which require greater than average",conditions,'\n')
    print(data[data[conditions] > data[conditions].mean()]['label'].unique())
    print("*****************")
    print("crops which require less than average",conditions,'\n')
    print(data[data[conditions] <= data[conditions].mean()]['label'].unique())

plt.subplot(3, 3, 1)
sea.distplot(data['N'],color='green')
plt.xlabel('ratio of nitrogen',fontsize=12)
plt.grid()

plt.subplot(3, 3, 2)
sea.distplot(data['P'],color='red')
plt.xlabel('ratio of phosphorous',fontsize=12)
plt.grid()


plt.subplot(3, 3, 3)
sea.distplot(data['K'],color='darkblue')
plt.xlabel('ratio of potassium',fontsize=12)
plt.grid()

plt.subplot(3, 3, 4)
sea.distplot(data['temperature'],color='black')
plt.xlabel('ratio of temperature',fontsize=12)
plt.grid()

plt.subplot(3, 3, 5)
sea.distplot(data['rainfall'],color='grey')
plt.xlabel('ratio of rainfall',fontsize=12)
plt.grid()

plt.subplot(3, 3, 6)
sea.distplot(data['humidity'],color='lightgreen')
plt.xlabel('ratio of humidity',fontsize=12)
plt.grid()

plt.subplot(3, 3, 7)
sea.distplot(data['ph'],color='darkgreen')
plt.xlabel('ratio of ph',fontsize=12)
plt.grid()



plt.suptitle('distribution for agricultural condition ',fontsize=20)
plt.tight_layout(rect=[0, 0.03, 1, 0.95])
# plt.set_figheight(15)
# plt.set_figwidth(15)
plt.figure(figsize=(16, 8)) 
plt.show()

##lets find out some intersting fact 
print("some intersting patterns")

print("*************************")
print("crops which require very high ratio nitrogen content in soil:",data[data['N']>120]['label'].unique())
print("crops which require very high ratio phosphorous content in soil:",data[data['P']>100]['label'].unique())
print("crops which require very high ratio potassiun content in soil:",data[data['K']>200]['label'].unique())
print("crops which require very high rainfall:",data[data['rainfall']>200]['label'].unique())
print("crops which require very low temperature:",data[data['temperature']<10]['label'].unique())
print("crops which require very high temperature:",data[data['temperature']>40]['label'].unique())
print("crops which require very low humidity:",data[data['humidity']<20]['label'].unique())
print("crops which require very low ph:",data[data['ph']<4]['label'].unique())
print("crops which require very high ph:",data[data['ph']>9]['label'].unique())

# lets understand whichcrops can only be grown in summer season,winter season and rainy season

print("summer crops")
print(data[(data['temperature']>30)&(data['humidity']>50)]['label'].unique())
summer_crops = data[(data['temperature']>30)&(data['humidity']>50)]['label'].unique()
print("***********************")
print("winter crops")
print(data[(data['temperature']<20)&(data['humidity']>30)]['label'].unique())
winter_crops = data[(data['temperature']<20)&(data['humidity']>30)]['label'].unique()
print("***********************")
print("rainy crops")
print(data[(data['rainfall']>200)&(data['humidity']>30)]['label'].unique())
rainy_crops = data[(data['rainfall']>200)&(data['humidity']>30)]['label'].unique()



# For bar graph
fig, ax = plt.subplots()
ax.bar(summer_crops," ")
# The following commands add labels to our figure.
plt.xlabel('Crops')
# plt.ylabel('Values')
plt.title("Best Crops for  Summer Season")
fig.autofmt_xdate()
plt.show()

# For bar graph
fig, ax = plt.subplots()
ax.bar(winter_crops," ")
# The following commands add labels to our figure.
plt.xlabel('Crops')
# plt.ylabel('Values')
plt.title("Best Crops for  Winter Season")
fig.autofmt_xdate()
plt.show()

# For bar graph
fig, ax = plt.subplots()
ax.bar(rainy_crops," ")
# The following commands add labels to our figure.
plt.xlabel('Crops')
# plt.ylabel('Values')
plt.title("Best Crops for  Rainy Season")
fig.autofmt_xdate()
plt.show()

from sklearn.cluster import KMeans
#removing the labels column
x = data. drop(['label'],axis=1)
#selecting all the values of the data
x = x.values
#checking the shape
print(x.shape)



#lets implements the K Means algorithms to perform clustering analysis
km=KMeans(n_clusters=4,init='k-means++',max_iter=300,n_init=10,random_state=0)
y_means=km.fit_predict(x)

#lets find out the result
a=data['label']
y_means=pd.DataFrame(y_means)
z=pd.concat([y_means,a],axis=1)
z=z.rename(columns = {0:'cluster'})

#lets check the clusters of each crops
print("lets check the result after applying the K Means clusteing analysis \n")
print("crops in first cluster :",z[z['cluster']==0]['label'].unique())
print("#"*50)
print("crops in second cluster :",z[z['cluster']==1]['label'].unique())
print("******************************************************")
print("crops in third cluster :",z[z['cluster']==2]['label'].unique())
print("******************************************************")
print("crops in fourth cluster :",z[z['cluster']==3]['label'].unique())

#lets split the data set for predictive modeling

y=data['label']
x=data.drop(['label'],axis=1)

print("shape of x:",x.shape)
print("shape of y:",y.shape)

#lets create training and teting sets for validation of results
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)

print("the shape of x train:", x_train.shape)
print("the shape of x tes:", x_test.shape)
print("the shape of y train:", y_train.shape)
print("the shape of y test:", y_test.shape)





#lets print Classification report also
from sklearn.metrics import classification_report
cr = classification_report(y_test, y_pred)
print(cr)

#LETS CHECK THE HEAD OF THE DATASET
data.head()

prediction=model.predict((npy.array([[88,40,40,18.8,84,8.5,200.9]])))
                                    
print(" suggested crop for given climatic conditions is:",prediction)



N = 60
P = 46
K = 22
Temprature = 24.9
Humidity = 699
PH = 6.6
RainFall = 1019
prediction=model.predict((npy.array([[N,P,K, Temprature, Humidity, PH, RainFall]])))                                    
print("The suggested crop for given climatic conditions is:",prediction)

# For bar graph
fig, ax = plt.subplots()
ax.bar(["Nitrogen","Phosphorus","Pottasium","Temprature "," Humidity","PH","RainFall"], [N,P,K,Temprature,Humidity,PH,RainFall])
# The following commands add labels to our figure.
plt.xlabel('input')
plt.ylabel('Values')
plt.title('Best Crop is ' + prediction + " for Given Set of Inputs")
fig.autofmt_xdate()
plt.show()